<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="myPage">
	
	<select id="getNowCh" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT NOWCNT.*,
			(SELECT 
			COUNT(*) AS TOTAL
			FROM CHALLENGEMEMBER CM
			INNER JOIN CHALLENGE CG
			ON CM.CHALLENGESEQ = CG.CHALLENGESEQ
			WHERE SYSDATE > CG.CHALLENGESTART AND CG.CHALLENGEEND > SYSDATE AND CM.EMAIL = #{email}
			) AS NOWCNT2
		FROM 
			(SELECT 
			COUNT(*) AS TOTAL
			FROM CHALLENGEMEMBER CM
			INNER JOIN CHALLENGE CG
			ON CM.CHALLENGESEQ = CG.CHALLENGESEQ
			WHERE CM.EMAIL = #{email}
			) NOWCNT
	</select>
	
	<select id="getCompleCh" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT NOWCNT.*,
			(SELECT 
			COUNT(*) AS TOTAL
			FROM CHALLENGEMEMBER CM
			INNER JOIN CHALLENGE CG
			ON CM.CHALLENGESEQ = CG.CHALLENGESEQ
			WHERE SYSDATE > CG.CHALLENGESTART AND CG.CHALLENGEEND > SYSDATE
			) AS NOWCNT2
		FROM 
			(SELECT 
			COUNT(*) AS TOTAL
			FROM CHALLENGEMEMBER CM
			INNER JOIN CHALLENGE CG
			ON CM.CHALLENGESEQ = CG.CHALLENGESEQ
			WHERE CM.EMAIL = #{email}
			) NOWCNT
	</select>
	
	<!-- 회원 정보 -->
	<select id="memberInfoData" parameterType="java.lang.String" resultType="java.util.Map">
		SELECT * FROM MEMBER WHERE EMAIL = #{value}
	</select>
	
	<!-- 내가 찜한 챌린지 갯수-->
	<select id="memberWishCount" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM CHALLENGEWISH
		WHERE EMAIL = #{email}
	</select>
	
	<!-- 내가 진행중인 챌린지 갯수 -->
	<select id="memberNowCount" resultType="java.lang.Integer">
		SELECT COUNT(*) AS memNowCnt
		FROM CHALLENGE CG
		INNER JOIN CHALLENGEMEMBER CM
		ON CM.CHALLENGESEQ = CG.CHALLENGESEQ
		WHERE SYSDATE > CG.CHALLENGESTART AND CG.CHALLENGEEND > SYSDATE
		AND CM.EMAIL = #{email}
	</select>
	
	<!-- 내가 진행준일 챌린지 리스트 -->
	<select id="memNowCntList" resultType="java.util.Map">
		SELECT CG.CHALLENGESEQ, CG.CATEGORY, CG.IDENTIFYFREQUENCY, CG.CHALLENGEPERIOD, CG.CHALLENGETITLE
		FROM CHALLENGE CG
		INNER JOIN CHALLENGEMEMBER CM
		ON CM.CHALLENGESEQ = CG.CHALLENGESEQ
		WHERE SYSDATE > CG.CHALLENGESTART AND CG.CHALLENGEEND > SYSDATE
		AND CM.EMAIL = #{email}
	</select>
	
	<!-- 내 챌린지 리스트 전체 가져오기-->
	<select id="memChallList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT CG.CHALLENGESEQ, CG.CATEGORY, CG.IDENTIFYFREQUENCY, CG.CHALLENGEPERIOD, CG.CHALLENGETITLE
		FROM CHALLENGE CG
		INNER JOIN CHALLENGEMEMBER CM
		ON CM.CHALLENGESEQ = CG.CHALLENGESEQ
		WHERE CM.EMAIL = #{email}
			<choose>
				<when test="name == 0">
				AND	CG.CHALLENGESTART > SYSDATE AND CG.CHALLENGEEND > SYSDATE
				</when>
				<when test="name == 1">
				AND	SYSDATE > CG.CHALLENGESTART AND CG.CHALLENGEEND > SYSDATE
				</when>
				<when test="name == 2">
				AND	SYSDATE > CG.CHALLENGESTART AND SYSDATE > CG.CHALLENGEEND
				</when>
			</choose>
		
	</select>
	
	<!-- 종료 된 챌린지 -->
	<select id="memEndCount" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM CHALLENGE
		WHERE SYSDATE > CHALLENGEEND AND EMAIL = #{email}
	</select>
	
	<!-- 카테고리 갯수 가져오기 -->
	<select id="memCategoryCount" parameterType="java.lang.String" resultType="java.util.Map"> 
		SELECT COUNT(*) AS TOTAL, CG.CATEGORY 
		FROM CHALLENGE CG
		INNER JOIN CHALLENGEMEMBER CM
		ON CM.CHALLENGESEQ = CG.CHALLENGESEQ
		WHERE CM.EMAIL = #{email}
		GROUP BY CG.CATEGORY
	</select>
	
	<!-- 오늘 진행중인 챌린지 리스트 가져오기 -->
	<select id="memDailyChallList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT CG.CHALLENGESEQ, CG.CATEGORY, CG.IDENTIFYFREQUENCY, CG.CHALLENGEPERIOD, CG.CHALLENGETITLE, CG.CHALLENGESAVEPHOTO
		FROM CHALLENGE CG
		INNER JOIN CHALLENGEMEMBER CM
		ON CM.CHALLENGESEQ = CG.CHALLENGESEQ
		WHERE SYSDATE > CHALLENGESTART AND CHALLENGEEND > SYSDATE
		AND CM.EMAIL = #{email}
	</select>
	
	<!-- 제안하기 작성 -->
	<insert id="writeSuggest" parameterType="java.util.Map">
		INSERT INTO SUGGESTBBS(SUGGESTBBSSEQ, SUGGESTBBSCATEGORY, SUGGESTBBSTITLE, SUGGESTBBSCONTENT, SUGGESTBBSDEL, LIKESEQ, EMAIL)
		VALUES(SUG_SEQ.NEXTVAL, #{scategory}, #{suggesttitle}, #{suggestcontent}, 0, 0, #{email})
	</insert>
	
	<!-- 제안하기 꺼내오기 -->
	
	
	<!-- like... -->
	<insert id="suggestMyLikeInsert" parameterType="java.util.Map">
		INSERT INTO MYLIKE(LIKESEQ, SUGGESTBBSSEQ, EMAIL)
		VALUES(LIKE_SEQ.NEXTVAL, #{suggestbbsseq}, #{email})
	</insert>
	
	<!-- 좋아요 삭제 -->
	<delete id="suggestMyLikeDel" parameterType="java.util.Map">
		DELETE FROM MYLIKE
		WHERE EMAIL = #{email}
		AND SUGGESTBBSSEQ = #{suggestbbsseq}
	</delete>
	
	<select id="suggestList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT SBS.*,
		CASE WHEN CNT.LIKECNT IS NULL THEN 0 ELSE CNT.LIKECNT END AS LIKECNT,
		CASE WHEN ML.SUGGESTBBSSEQ IS NULL THEN 0 ELSE 1 END AS LIKECHECK
		FROM SUGGESTBBS SBS
		LEFT JOIN (SELECT SUGGESTBBSSEQ,COUNT(*) AS LIKECNT FROM MYLIKE GROUP BY SUGGESTBBSSEQ) CNT
		ON SBS.SUGGESTBBSSEQ = CNT.SUGGESTBBSSEQ
		LEFT JOIN (SELECT SUGGESTBBSSEQ FROM MYLIKE WHERE EMAIL = #{email}) ML
		ON SBS.SUGGESTBBSSEQ = ML.SUGGESTBBSSEQ
		WHERE SBS.SUGGESTBBSDEL = 0
	</select>

	
</mapper>