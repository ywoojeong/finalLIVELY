<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="challenge">
	
	<insert id="challengeInsert" parameterType="com.a.dto.challengeDto">
		
		INSERT INTO CHALLENGE(CHALLENGESEQ, CATEGORY, CHALLENGETITLE, CHALLENGETEXT,CHALLENGESTART, CHALLENGEEND,CHALLENGEPERIOD,
						IDENTIFYFREQUENCY, IDENTIFYDAY, IDENTIFYTIME, CHALLENGEPHOTO, CHALLENGESAVEPHOTO, CERTIFYPHOTO, CERTIFYSAVEPHOTO, CERTIFY, RATINGAVG, CHALLENGESTOP, CHALLENGEDEL, 
						HEADERNUM, POINTCOUNT, CHALLENGEMEMBER, EMAIL, CHALLENGESDATE)
		VALUES(CHAL_SEQ.NEXTVAL, #{category}, #{challengetitle}, #{challengetext}, #{challengestart}, #{challengeend}, #{challengeperiod}, 
				#{identifyfrequency}, #{identifyday}, #{identifytime}, #{challengephoto}, #{challengesavephoto}, #{certifyphoto}, #{certifysavephoto},#{certify}, 0.0, 0, 0,
				(SELECT AUTH FROM MEMBER WHERE EMAIL = #{email}), #{pointcount}, 0, #{email}, CURRENT_DATE)
		
	</insert>
	
	<!-- hotChallengeData 데이터 전부 가져오기 java.util.Map(param은 start end search category   -->
	<select id="hotChallengeData" parameterType="java.util.Map" resultType="com.a.util.lowerKeyMap">
	 	SELECT CHALLENGESEQ, CATEGORY, CHALLENGETITLE, CHALLENGETEXT, CHALLENGESTART, CHALLENGEEND, CHALLENGEPERIOD,
	 			  IDENTIFYFREQUENCY, IDENTIFYDAY, IDENTIFYTIME, CHALLENGEPHOTO, CHALLENGESAVEPHOTO, RATINGAVG, HEADERNUM, POINTCOUNT, CHALLENGEMEMBER, EMAIL,
	 			  NICKNAME, AUTH, MEMBERPHOTO
	 	FROM (SELECT ROW_NUMBER()OVER(ORDER BY CHALLENGEMEMBER DESC, CHALLENGESDATE DESC) AS RNUM,
				CHALLENGESEQ, CATEGORY, CHALLENGETITLE, CHALLENGETEXT, CHALLENGESTART, CHALLENGEEND, CHALLENGEPERIOD,
	 			IDENTIFYFREQUENCY, IDENTIFYDAY, IDENTIFYTIME, CHALLENGEPHOTO, CHALLENGESAVEPHOTO, RATINGAVG, HEADERNUM, POINTCOUNT, CHALLENGEMEMBER, C.EMAIL,
	 			 M.NICKNAME, M.AUTH, M.MEMBERPHOTO
	  		  FROM CHALLENGE C, MEMBER M
	  		  WHERE 1=1 
	  		  		AND C.EMAIL = M.EMAIL
		  		  		AND CHALLENGESTOP = 0 
		  		  			AND CHALLENGEDEL = 0
		  		  				<if test="category != 0"><!-- 안전성을 고려 -->
				  					AND CATEGORY = ${category}
				  				</if>
					  		  	 	<if test="search != null and search != ''"><!-- 안전성을 고려 -->
						  				 AND CHALLENGETITLE LIKE '%'||#{search}||'%'		  
					  				</if>
			  ORDER BY CHALLENGEMEMBER DESC, CHALLENGESTART DESC) 
	 	WHERE RNUM BETWEEN ${startPage} AND ${endPage}
	</select>
	
	<!-- newChallengeData 데이터 전부 가져오기 java.util.Map(param은 start end search category   -->
	<select id="newChallengeData" parameterType="java.util.Map" resultType="com.a.util.lowerKeyMap">
	 	SELECT CHALLENGESEQ, CATEGORY, CHALLENGETITLE, CHALLENGETEXT, CHALLENGESTART, CHALLENGEEND, CHALLENGEPERIOD,
	 			  IDENTIFYFREQUENCY, IDENTIFYDAY, IDENTIFYTIME, CHALLENGEPHOTO, CHALLENGESAVEPHOTO, RATINGAVG, HEADERNUM, POINTCOUNT, CHALLENGEMEMBER, EMAIL,
	 			  NICKNAME, AUTH, MEMBERPHOTO
	 	FROM (SELECT ROW_NUMBER()OVER(ORDER BY CHALLENGESTART DESC, CHALLENGESDATE DESC) AS RNUM,
				CHALLENGESEQ, CATEGORY, CHALLENGETITLE, CHALLENGETEXT, CHALLENGESTART, CHALLENGEEND, CHALLENGEPERIOD,
	 			IDENTIFYFREQUENCY, IDENTIFYDAY, IDENTIFYTIME, CHALLENGEPHOTO, CHALLENGESAVEPHOTO, RATINGAVG, HEADERNUM, POINTCOUNT, CHALLENGEMEMBER, C.EMAIL,
	 			 M.NICKNAME, M.AUTH, M.MEMBERPHOTO
	  		  FROM CHALLENGE C, MEMBER M
	  		  WHERE 1=1 
	  		  		AND C.EMAIL = M.EMAIL
		  		  		AND CHALLENGESTOP = 0 
		  		  			AND CHALLENGEDEL = 0
		  		  				<if test="category != 0"><!-- 안전성을 고려 -->
				  					AND CATEGORY = ${category}
				  				</if>
					  		  	 	<if test="search != null and search != ''"><!-- 안전성을 고려 -->
						  				 AND CHALLENGETITLE LIKE '%'||#{search}||'%'		  
					  				</if>
			ORDER BY CHALLENGESTART DESC)
	 	WHERE RNUM BETWEEN ${startPage} AND ${endPage}
	</select>
	
	
	<!-- challengeDataCount 글의 총 수 가져오기 paramMap search / category-->
	<select id="challengeDataCount" parameterType="java.util.Map" resultType="java.lang.Integer">
	 	SELECT NVL(COUNT(*), 0)
	 	FROM CHALLENGE
	  	WHERE 1=1 
	  		AND CHALLENGESTOP = 0 
	  			AND CHALLENGEDEL = 0
	  				<if test="category != 0"><!-- 안전성을 고려 -->
	  					AND CATEGORY = ${category}
	  				</if>
					  	 <if test="search != null and search != ''"><!-- 안전성을 고려 -->
			 				 AND CHALLENGETITLE LIKE '%'||#{search}||'%'		  
						</if>
	</select>
	
	<!-- 생성한 멤버의 데이터 가져오기 -->
	<select id="createChallengeMember"  parameterType="java.lang.String" resultType="com.a.util.lowerKeyMap">
		SELECT C.CHALLENGESEQ, M.EMAIL, M.NICKNAME, M.AUTH, M.MEMBERPHOTONAME, M.POINT 
		FROM CHALLENGE C, MEMBER M
		WHERE C.EMAIL = M.EMAIL
			AND C.EMAIL = #{email}
	</select>
	
	<!-- 챌린지 한개 가져오기 challengeDetail //parameter : challengeseq -->
	<select id="challengeDetail" parameterType="java.lang.Integer" resultType="com.a.dto.challengeDto">
		SELECT *
		FROM CHALLENGE
		WHERE CHALLENGESEQ = #{challengeseq}
	</select>
	
	<!-- 챌린지 찜하기 challengelikeInsert -->
	<insert id="challengelikeInsert" parameterType="java.util.Map">
		INSERT INTO CHALLENGEWISH(WISHSEQ, WISH, CHALLENGESEQ, EMAIL)
		VALUES(WISH_SEQ.NEXTVAL, 1, #{challengeseq}, #{email})
	</insert>
	
	<!-- 챌린지 찜하기 삭제 challengelikeDelete -->
	<delete id="challengelikeDelete"  parameterType="java.util.Map">
		DELETE FROM CHALLENGEWISH
		WHERE CHALLENGESEQ = #{challengeseq}
			AND EMAIL =  #{email}
	</delete>
	
	<!-- 챌린지 찜하기 내데이터 가져오기 challengelikeSeq -->
	<select id="challengelikeSeq" parameterType="java.util.Map" resultType="com.a.util.lowerKeyMap">
		SELECT WISHSEQ, WISH, CHALLENGESEQ, EMAIL
		FROM CHALLENGEWISH
		WHERE EMAIL=#{email} AND CHALLENGESEQ = #{challengeseq}	
	</select>
	
	<!-- 세션에 담긴 한사람 데이터가져오기 -->
	<select id="userData" parameterType="java.lang.String" resultType="com.a.dto.MemberDto">
		SELECT *
		FROM MEMBER
		WHERE EMAIL = #{email}
	</select>
	
	<!-- 챌린지 멤버 insert challengeMemberInsert -->
	<insert id="challengeMemberInsert" parameterType="java.util.Map">
		INSERT INTO CHALLENGEMEMBER(CHALLENGMEMSEQ, IDENTIFY, SUCCESS, CHALLENGESEQ, EMAIL)
		VALUES(CHALMEM_SEQ.NEXTVAL, 0, 0,  #{challengeseq}, #{email})
	</insert>
	
	<!-- 챌린지 가입 시 포인트 차감memberPointReducation -->
	<update id="memberPointReducation" parameterType="java.util.Map">
		UPDATE MEMBER
		SET POINT = POINT-${point}
		WHERE EMAIL = #{email}	
	</update>
	
	<!-- 해당 챌린지 가입한 사람 본인 challengeMember -->
	<select id="challengeMember" parameterType="java.util.Map" resultType="com.a.util.lowerKeyMap">
		SELECT *
		FROM CHALLENGEMEMBER
		WHERE EMAIL = #{email} AND CHALLENGESEQ = #{challengeseq}
	</select>
	
	<!-- 챌린지 멤버 수 증가시키기 -->
	<update id="challengeMemberCountUp" parameterType="java.util.Map">
		UPDATE CHALLENGE
		SET CHALLENGEMEMBER = CHALLENGEMEMBER+1
		WHERE CHALLENGESEQ = #{challengeseq}	
	</update>
	
	<!-- 챌린지 멤버  전체 가입정보 가져오기 -->
	<select id="challengeAllMember" parameterType="java.lang.Integer" resultType="com.a.util.lowerKeyMap">
		SELECT CM.CHALLENGMEMSEQ, M.EMAIL, M.NICKNAME, M.MEMBERPHOTONAME, M.POINT, CM.CHALLENGESEQ, CM.IDENTIFY
		FROM MEMBER M, CHALLENGEMEMBER CM
		WHERE M.EMAIL = CM.EMAIL
			AND CM.CHALLENGESEQ = #{challengeseq}
		ORDER BY CM.CHALLENGMEMSEQ DESC
	</select>
	
	<!-- 팔로우 증가 followInsert-->
	<insert id="followInsert" parameterType="java.util.Map">
		INSERT INTO FOLLOW(FOLLOWSEQ, FOLLOW, FOLLOWEMAIL, FOLLOWINGEMAIL)
		VALUES(FOLL_SEQ.NEXTVAL, 1, #{followemail}, #{followingemail})
	</insert>
	
	<!--팔로우 삭제 followDelete -->
	<delete id="followDelete"  parameterType="java.util.Map">
		DELETE FROM FOLLOW
		WHERE FOLLOWEMAIL = #{followemail}
			AND FOLLOWINGEMAIL = #{followingemail}
	</delete>
	
	<!-- 팔로워 확인하기 challusercheck -->
	<select id="followCheck" parameterType="java.util.Map" resultType="java.lang.Integer">
		SELECT COUNT(FOLLOW)
		FROM FOLLOW
		WHERE FOLLOWEMAIL = #{followemail}
			AND FOLLOWINGEMAIL = #{followingemail}
	</select>
	
	
	<!-- 리뷰 넣기 challengeReviewInsert -->
	<insert id="challengeReviewInsert" parameterType="java.util.Map">
		INSERT INTO CHALLENGECOMMENT(CHALCOMSEQ, CHALCOMCONTENT, CHALCOMDATE,CHALCOMRATING, CHALCOMDEL,CHALLENGESEQ, EMAIL, CHALLLIKE)
		VALUES(CHALCOM_SEQ.NEXTVAL, #{revcontent}, CURRENT_DATE, #{rating}, 0, #{challengeseq}, #{email}, 0)
	</insert>
	
	<!-- 리뷰 좋아요+1 -->
	<update id="challengeReviewLike" parameterType="java.lang.Integer">
		UPDATE CHALLENGECOMMENT
		SET CHALLLIKE = CHALLLIKE+1
		WHERE CHALCOMSEQ = #{chalcomseq}
	</update>
	
	<!-- 리뷰 좋아요 해제 -->
	<update id="challengeReviewUnLike" parameterType="java.lang.Integer">
		UPDATE CHALLENGECOMMENT
		SET CHALLLIKE = CHALLLIKE-1
		WHERE CHALCOMSEQ = #{chalcomseq}
	</update>
	
	<!-- 리뷰 전체 가져오기 -->
	<select id="challengereviewAll" parameterType="java.util.Map" resultType="com.a.util.lowerKeyMap">
		SELECT CC.CHALCOMSEQ, CC.CHALCOMCONTENT, CC.CHALCOMDATE, CC.CHALCOMRATING, CC.CHALLENGESEQ, CC.EMAIL, CC.CHALLLIKE, M.NICKNAME, M.MEMBERPHOTONAME
		FROM CHALLENGECOMMENT CC, MEMBER M
		WHERE CC.EMAIL = M.EMAIL
			AND CC.CHALLENGESEQ = #{challengeseq}
		<choose>
			<when test="number == 0">
				ORDER BY CHALCOMDATE DESC
			</when>
			<when test="number == 1">
				 ORDER BY CC.CHALLLIKE DESC, CC.CHALCOMDATE DESC
			</when>
			<when test="number == 2">
				ORDER BY CC.CHALCOMRATING DESC, CC.CHALCOMDATE DESC
			</when>
		</choose>
	</select>
	
	<!-- 후기 결과 갯수와..등등...가져오기 -->
	<select id="reviewCountAll" parameterType="java.lang.Integer" resultType="java.lang.Integer">
		SELECT COUNT(*) AS COMMENTCOUNT
		FROM CHALLENGECOMMENT
		WHERE CHALLENGESEQ = #{challengeseq}
	</select>
	
	<select id="reviewAvg" parameterType="java.lang.Integer" resultType="java.lang.Double">
		SELECT ROUND(AVG(CHALCOMRATING), 1) AS COMMENTSUM
		FROM CHALLENGECOMMENT
		WHERE CHALLENGESEQ = #{challengeseq}
	</select>
	
	<select id="rateFive" parameterType="java.lang.Integer" resultType="java.lang.Integer">
		SELECT COUNT(*) AS RATEFIVE
		FROM CHALLENGECOMMENT
		WHERE CHALLENGESEQ = #{challengeseq}
			AND CHALCOMRATING = 5
	</select>
	
	<select id="rateFour" parameterType="java.lang.Integer" resultType="java.lang.Integer">
		SELECT COUNT(*) AS RATEFOUR
		FROM CHALLENGECOMMENT
		WHERE CHALLENGESEQ = #{challengeseq}
			AND CHALCOMRATING = 4
	</select>
	
	<select id="rateThree" parameterType="java.lang.Integer" resultType="java.lang.Integer">
		SELECT COUNT(*) AS RATETHREE
		FROM CHALLENGECOMMENT
		WHERE CHALLENGESEQ = #{challengeseq}
			AND CHALCOMRATING = 3
	</select>
	
	<select id="rateTwo" parameterType="java.lang.Integer" resultType="java.lang.Integer">
		SELECT COUNT(*) AS RATEFOUR
		FROM CHALLENGECOMMENT
		WHERE CHALLENGESEQ = #{challengeseq}
			AND CHALCOMRATING = 2
	</select>
	
	<select id="rateOne" parameterType="java.lang.Integer" resultType="java.lang.Integer">
		SELECT COUNT(*) AS RATEONE
		FROM CHALLENGECOMMENT
		WHERE CHALLENGESEQ = #{challengeseq}
			AND CHALCOMRATING = 1
	</select>
	<!-- ///////////////////////////////////////// -->
	
	<!-- 후기 좋아요 추가 -->
	<insert id="commentLike" parameterType="java.util.Map">
		INSERT INTO COMMENTLIKE(CLIKESEQ, COMMENTLIKE, LIKEEMAIL, CHALCOMSEQ)
		VALUES(CLIKE_SEQ.NEXTVAL, 1, #{email}, #{chalcomseq})
	</insert>
	
	<!--후기 좋아요 삭제-->
	<delete id="commentLikeDel" parameterType="java.util.Map">
		DELETE FROM COMMENTLIKE
		WHERE LIKEEMAIL = #{email}
			AND CHALCOMSEQ = #{chalcomseq}
			AND COMMENTLIKE = 1
	</delete>
	
	<!-- 후기 있나 없나 확인 -->
	<select id="commentLikeCheck" parameterType="java.util.Map" resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM COMMENTLIKE
		WHERE LIKEEMAIL = #{email}
			AND CHALCOMSEQ = #{chalcomseq}
			 AND COMMENTLIKE = 1
	</select>
	
	<!-- 인증방법 -->
	
	<insert id="identifyInsert" parameterType="java.util.Map">
		INSERT INTO CERTIFY(CERTIFYSEQ, CERTIFYPHOTO, CERTIFYPHOTONAME, CERTIFYDATE, EMAIL, CHALLENGESEQ)
		VALUES(CERT_SEQ.NEXTVAL, #{certifyPhoto}, #{certifyPhotoname}, CURRENT_DATE, #{email}, #{challengeseq})
	</insert>
	
	<!-- 인증 UPDATE -->
	<update id="identifyUpdate">
		UPDATE CHALLENGEMEMBER
		SET IDENTIFY = IDENTIFY+1
		WHERE EMAIL =  #{email}
			AND CHALLENGESEQ = #{challengeseq}
	</update>
	
	<!-- 인증 되엇는지 체크 -->
	<select id="identifyCheck" parameterType="java.util.Map" resultType="java.lang.Integer">
		<![CDATA[ 
		SELECT COUNT(*) AS CERTIFYCHECK
		FROM CERTIFY
		WHERE CERTIFYDATE >= TO_DATE(TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD HH24'), 'YYYY-MM-DD HH24')
			AND CERTIFYDATE <= TO_DATE(TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD HH24'), 'YYYY-MM-DD HH24')+(600/86400)
			AND EMAIL = #{email}	
			AND CHALLENGESEQ = #{challengeseq}
		 ]]>
	</select>
	
	<!-- 인증 다 불러오기 -->
	<select id="identifyAll" resultType="com.a.util.lowerKeyMap">
		SELECT CERTIFYSEQ, CERTIFYPHOTO, CERTIFYPHOTONAME, CERTIFYDATE, EMAIL, CHALLENGESEQ
		FROM CERTIFY
		WHERE EMAIL = #{email}	
			AND CHALLENGESEQ = #{challengeseq}
	</select>
	
	<!-- 인증 결과 데이터 -->
	<select id="identifyResult" parameterType="java.lang.Integer"  resultType="com.a.util.lowerKeyMap">
		SELECT RNUM, IDENTIFY, SUCCESS, CHALLENGESEQ, EMAIL, NICKNAME, MEMBERPHOTONAME, IDENTIFYFREQUENCY*CHALLENGEPERIOD AS TOTALDAY, ROUND(IDENTIFY/(IDENTIFYFREQUENCY*CHALLENGEPERIOD)*100,0) AS PERCENTS
		FROM(SELECT ROW_NUMBER()OVER(ORDER BY CM.IDENTIFY DESC) AS RNUM, CM.IDENTIFY, CM.SUCCESS, CM.CHALLENGESEQ, M.EMAIL, M.NICKNAME, M.MEMBERPHOTONAME, 
					CASE C.IDENTIFYFREQUENCY
						WHEN 9 THEN 7
					    WHEN 8 THEN 5
					    WHEN 7 THEN 2
					    ELSE C.IDENTIFYFREQUENCY
					    END AS IDENTIFYFREQUENCY, C.CHALLENGEPERIOD
		FROM CHALLENGEMEMBER CM, MEMBER M, CHALLENGE C
		WHERE M.EMAIL = CM.EMAIL
			AND C.CHALLENGESEQ = CM.CHALLENGESEQ
			AND M.EMAIL = CM.EMAIL
			AND CM.CHALLENGESEQ = #{challengeseq})
	</select>
	
	<!-- 나만의 인증횟수 -->
	<select id="identifyResultUser" parameterType="java.util.Map"  resultType="com.a.util.lowerKeyMap">
		SELECT EMAIL, IDENTIFY, SUCCESS, NICKNAME, MEMBERPHOTONAME, IDENTIFYFREQUENCY*CHALLENGEPERIOD AS TOTALDAY, ROUND(IDENTIFY/(IDENTIFYFREQUENCY*CHALLENGEPERIOD)*100,0) AS PERCENTS
		FROM (SELECT CM.IDENTIFY, CM.SUCCESS, CM.CHALLENGESEQ, M.EMAIL, M.NICKNAME, M.MEMBERPHOTONAME, 
					CASE C.IDENTIFYFREQUENCY
						WHEN 9 THEN 7
					    WHEN 8 THEN 5
					    WHEN 7 THEN 2
					    ELSE C.IDENTIFYFREQUENCY
					    END AS IDENTIFYFREQUENCY, C.CHALLENGEPERIOD
		FROM CHALLENGEMEMBER CM, MEMBER M, CHALLENGE C
		WHERE M.EMAIL = CM.EMAIL
			AND C.CHALLENGESEQ = CM.CHALLENGESEQ
			AND M.EMAIL = CM.EMAIL
			AND CM.CHALLENGESEQ = #{challengeseq}
			AND M.EMAIL = #{email})
	</select>
	
	<!-- 해당 챌린지의 전체 결과값 -->
	<select id="challResultAllOne" parameterType="java.lang.Integer" resultType="com.a.util.lowerKeyMap">
		SELECT CHALTOTALDAY, CERTICOUNT, ROUND(CHALTOTALDAY/CHALTOTALDAY,0) AS PERCENTS
		FROM (SELECT IDENTIFYCOUNT*IDENTIFYFREQUENCY AS CHALTOTALDAY, CERTICOUNT
			FROM (SELECT CHALLENGEMEMBER*CHALLENGEPERIOD AS IDENTIFYCOUNT,
				(SELECT COUNT(*) FROM CERTIFY WHERE CHALLENGESEQ = #{challengeseq}) AS CERTICOUNT,
				CASE IDENTIFYFREQUENCY
					WHEN 9 THEN 7
				    WHEN 8 THEN 5
				    WHEN 7 THEN 2
				    ELSE IDENTIFYFREQUENCY
				    END AS IDENTIFYFREQUENCY
			FROM CHALLENGE
			WHERE CHALLENGESEQ = #{challengeseq}))
	</select>
	
	<!-- 추천 페이지 오늘자 4개 -->
	<select id="ChoiceTodayStart" resultType="com.a.util.lowerKeyMap">
		SELECT C.* FROM 
			(SELECT ROW_NUMBER()OVER(ORDER BY CHALLENGEMEMBER DESC) AS RNUM, CHALLENGESEQ, CATEGORY, CHALLENGETITLE, CHALLENGETEXT, CHALLENGESTART, CHALLENGEEND, CHALLENGEPERIOD,
		 	 IDENTIFYFREQUENCY, IDENTIFYDAY, IDENTIFYTIME, CHALLENGEPHOTO, CHALLENGESAVEPHOTO, RATINGAVG, HEADERNUM, POINTCOUNT, CHALLENGEMEMBER, EMAIL FROM CHALLENGE 
			 WHERE TO_CHAR(CHALLENGESTART, 'YYYYMMDD') = TO_CHAR(CURRENT_DATE, 'YYYYMMDD') AND CHALLENGESAVEPHOTO != '0'
	        ORDER BY DBMS_RANDOM.VALUE) C
		WHERE ROWNUM <![CDATA[ <= ]]> 4
	</select>
	
	<!--admin이만든 4개 -->
	<select id="ChoiceSuggestChallenge" resultType="com.a.util.lowerKeyMap">
		SELECT C.* FROM 
			(SELECT ROW_NUMBER()OVER(ORDER BY CHALLENGEMEMBER DESC) AS RNUM, CHALLENGESEQ, CATEGORY, CHALLENGETITLE, CHALLENGETEXT, CHALLENGESTART, CHALLENGEEND, CHALLENGEPERIOD,
		 	 IDENTIFYFREQUENCY, IDENTIFYDAY, IDENTIFYTIME, CHALLENGEPHOTO, CHALLENGESAVEPHOTO, RATINGAVG, HEADERNUM, POINTCOUNT, CHALLENGEMEMBER, EMAIL FROM CHALLENGE 
			 WHERE HEADERNUM = 1 AND CHALLENGESAVEPHOTO != '0' AND TO_CHAR(CHALLENGESTART, 'YYYYMMDD')<![CDATA[ >= ]]> TO_CHAR(CURRENT_DATE, 'YYYYMMDD')
	        ORDER BY DBMS_RANDOM.VALUE) C
		WHERE ROWNUM <![CDATA[ <= ]]> 4
	</select>
		
</mapper>